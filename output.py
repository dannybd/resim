import csv

import math
import os


def calculate_vibes(player, day, multiplier):
    frequency = 6 + round(10 * player["buoyancy"] * multiplier)
    phase = math.pi * ((2 / frequency) * day + 0.5)

    pressurization = player["pressurization"] * multiplier
    cinnamon = (player["cinnamon"] if player["cinnamon"] is not None else 0) * multiplier
    viberange = 0.5 * (pressurization + cinnamon)
    return (viberange * math.sin(phase)) - (0.5 * pressurization) + (0.5 * cinnamon)


class SaveCsv:
    def __init__(self, run_name: str, category_name: str):
        self.final_filename = f"roll_data/{run_name}-{category_name}.csv"
        self.partial_filename = f"{self.final_filename}.partial"
        self.file = open(self.partial_filename, "w", newline="")

        self.csv = csv.writer(self.file)

        # Write header
        self.csv.writerow(
            [
                "event_type",
                "roll",
                "passed",
                "batter_buoyancy",
                "batter_divinity",
                "batter_martyrdom",
                "batter_moxie",
                "batter_musclitude",
                "batter_patheticism",
                "batter_thwackability",
                "batter_tragicness",
                "batter_coldness",
                "batter_overpowerment",
                "batter_ruthlessness",
                "batter_shakespearianism",
                "batter_suppression",
                "batter_unthwackability",
                "batter_base_thirst",
                "batter_continuation",
                "batter_ground_friction",
                "batter_indulgence",
                "batter_laserlikeness",
                "batter_anticapitalism",
                "batter_chasiness",
                "batter_omniscience",
                "batter_tenaciousness",
                "batter_watchfulness",
                "batter_pressurization",
                "batter_cinnamon",
                "batter_multiplier",
                "pitcher_buoyancy",
                "pitcher_divinity",
                "pitcher_martyrdom",
                "pitcher_moxie",
                "pitcher_musclitude",
                "pitcher_patheticism",
                "pitcher_thwackability",
                "pitcher_tragicness",
                "pitcher_ruthlessness",
                "pitcher_overpowerment",
                "pitcher_unthwackability",
                "pitcher_shakespearianism",
                "pitcher_suppression",
                "pitcher_coldness",
                "pitcher_base_thirst",
                "pitcher_continuation",
                "pitcher_ground_friction",
                "pitcher_indulgence",
                "pitcher_laserlikeness",
                "pitcher_anticapitalism",
                "pitcher_chasiness",
                "pitcher_omniscience",
                "pitcher_tenaciousness",
                "pitcher_watchfulness",
                "pitcher_pressurization",
                "pitcher_cinnamon",
                "pitcher_multiplier",
                "fielder_anticapitalism",
                "fielder_chasiness",
                "fielder_omniscience",
                "fielder_tenaciousness",
                "fielder_watchfulness",
                "ballpark_grandiosity",
                "ballpark_fortification",
                "ballpark_obtuseness",
                "ballpark_ominousness",
                "ballpark_inconvenience",
                "ballpark_viscosity",
                "ballpark_forwardness",
                "ballpark_mysticism",
                "ballpark_elongation",
                "ballpark_filthiness",
                "what1",
                "what2",
                "batting_team_hype",
                "pitching_team_hype",
                "batter_name",
                "pitcher_name",
                "fielder_name",
                "batter_vibes",
                "pitcher_vibes",
                "fielder_vibes",
                "batter_mods",
                "batting_team_mods",
                "pitcher_mods",
                "pitching_team_mods",
                "fielder_mods",
                "game_id",
                "stadium_id",
                "play_count",
                "weather",
                "ball_count",
                "strike_count",
                "out_count",
                "season",
                "day",
                "top_of_inning",
                "home_score",
                "away_score",
                "inning",
                "batting_team_roster_size",
                "pitching_team_roster_size",
                "baserunner_count",
                "is_strike",
                "strike_roll",
                "strike_threshold",
                "fielder_roll",
            ]
        )

    def write(
        self,
        event_type: str,
        roll: float,
        passed: bool,
        batter,
        batting_team,
        pitcher,
        pitching_team,
        stadium,
        update,
        what1: float,
        what2: float,
        batter_multiplier: float,
        pitcher_multiplier: float,
        is_strike: bool,
        strike_roll: float,
        strike_threshold: float,
        fielder_roll,
        fielder,
    ):
        self.csv.writerow(
            [
                event_type,
                roll,
                passed,
                batter.data["buoyancy"],
                batter.data["divinity"],
                batter.data["martyrdom"],
                batter.data["moxie"],
                batter.data["musclitude"],
                batter.data["patheticism"],
                batter.data["thwackability"],
                batter.data["tragicness"],
                batter.data["coldness"],
                batter.data["overpowerment"],
                batter.data["ruthlessness"],
                batter.data["shakespearianism"],
                batter.data["suppression"],
                batter.data["unthwackability"],
                batter.data["baseThirst"],
                batter.data["continuation"],
                batter.data["groundFriction"],
                batter.data["indulgence"],
                batter.data["laserlikeness"],
                batter.data["anticapitalism"],
                batter.data["chasiness"],
                batter.data["omniscience"],
                batter.data["tenaciousness"],
                batter.data["watchfulness"],
                batter.data["pressurization"],
                batter.data.get("cinnamon", 0),
                batter_multiplier,
                pitcher.data["buoyancy"],
                pitcher.data["divinity"],
                pitcher.data["martyrdom"],
                pitcher.data["moxie"],
                pitcher.data["musclitude"],
                pitcher.data["patheticism"],
                pitcher.data["thwackability"],
                pitcher.data["tragicness"],
                pitcher.data["ruthlessness"],
                pitcher.data["overpowerment"],
                pitcher.data["unthwackability"],
                pitcher.data["shakespearianism"],
                pitcher.data["suppression"],
                pitcher.data["coldness"],
                pitcher.data["baseThirst"],
                pitcher.data["continuation"],
                pitcher.data["groundFriction"],
                pitcher.data["indulgence"],
                pitcher.data["laserlikeness"],
                pitcher.data["anticapitalism"],
                pitcher.data["chasiness"],
                pitcher.data["omniscience"],
                pitcher.data["tenaciousness"],
                pitcher.data["watchfulness"],
                pitcher.data["pressurization"],
                pitcher.data["cinnamon"],
                pitcher_multiplier,
                fielder.data["anticapitalism"] if fielder is not None else 0,
                fielder.data["chasiness"] if fielder is not None else 0,
                fielder.data["omniscience"] if fielder is not None else 0,
                fielder.data["tenaciousness"] if fielder is not None else 0,
                fielder.data["watchfulness"] if fielder is not None else 0,
                stadium.data["grandiosity"],
                stadium.data["fortification"],
                stadium.data["obtuseness"],
                stadium.data["ominousness"],
                stadium.data["inconvenience"],
                stadium.data["viscosity"],
                stadium.data["forwardness"],
                stadium.data["mysticism"],
                stadium.data["elongation"],
                stadium.data["filthiness"],
                what1,
                what2,
                stadium.data["hype"] if not update["topOfInning"] else 0,
                stadium.data["hype"] if update["topOfInning"] else 0,
                batter.data["name"],
                pitcher.data["name"],
                fielder.data["name"] if fielder is not None else "",
                calculate_vibes(batter.data, update["day"], 1),
                calculate_vibes(pitcher.data, update["day"], 1),
                calculate_vibes(fielder.data, update["day"], 1) if fielder is not None else 0,
                ";".join(batter.mods),
                ";".join(batting_team.mods),
                ";".join(pitcher.mods),
                ";".join(pitching_team.mods),
                ";".join(fielder.mods) if fielder is not None else "",
                update["id"],
                update["stadiumId"],
                update["playCount"],
                update["weather"],
                update["atBatBalls"],
                update["atBatStrikes"],
                update["halfInningOuts"],
                update["season"],
                update["day"],
                update["topOfInning"],
                update["homeScore"],
                update["awayScore"],
                update["inning"],
                len(batting_team.data["lineup"]) + len(batting_team.data["rotation"]),
                len(pitching_team.data["lineup"]) + len(pitching_team.data["rotation"]),
                update["baserunnerCount"],
                is_strike,
                strike_roll,
                strike_threshold,
                fielder_roll,
            ]
        )

    def close(self):
        self.file.close()
        self.file = None
        self.csv = None

        os.rename(self.partial_filename, self.final_filename)
